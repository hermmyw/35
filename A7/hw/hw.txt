hw.txt
------------------------------------------------------------------------------
1. 
(1) Suppose the other teams really had been observing all the bytes going 
across the network. Is your resulting network still secure?
I believe the network is still secure, because the file is encrypted by 
the sender's public key and has to be decrpted by the sender's private key,
or vice versa. If the observer only knows the bytes go across the network,
he will not be able to decrypt the encrypted message without the sender's
key. 

(2) you assumed the other teams had also tapped your keyboards and had 
observed all of your team's keystrokes
I think the resulting network is still secure since we disable password
authentication. The verfication is done by assymetric encryption, in which 
a message is encrypted by my public key and will only be decrypted by my 
private key. The message is encrypted by symmetric encryption, or a session 
key. Without password authentication, I do not need
to type my passphrase to get access to the message. Therefore, the observer
would not know my passphrase. The session key is not typed in by my team but 
generated by the processor and will change frequently, so the observer would 
not be able to find out the session key to decrypt the message. 

(3) you are booting off USB and you assume the other teams temporarily had 
physical control of the USB
If the other team had physical control of the beaglebone, I don't think the 
network will still be secure. They could use the board to log in as a root 
user and get access to the remote host server without entering the password 
since we disabled password authentication. 

2. Explain why the gpg --verify command in the following instructions doesn't 
really verify that you personally created the file in question. How would 
you go about fixing this problem?
We can be sure
that the digital signature was sent by the sender because only the sender's public
key can decrypt the digital signature. gpg --verify only verifies if I 
personally created the signature of the file, but not created the file itself. 
If someone else created eeprom, but I signed it with my key, the receiver 
would not know I am not the creator. One way to fix the problem is to attach the 
creator's public key with the file, so the receiver can verify signature using
only the creator's public key.
