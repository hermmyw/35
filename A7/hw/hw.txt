hw.txt
------------------------------------------------------------------------------
1. (1) you assumed the other teams had also tapped your keyboards and had 
observed all of your team's keystrokes
I think the resulting network is still secure. The observer can only get my 
public key, but not the private key. The verfication is done by assymetric 
encryption, in which a message is encrypted by my public key and will only be 
decrypted by my private key. The message is encrypted by symmetric 
encryption, or a session key. The session key is not typed in by my team but 
generated by the processor and will change frequently, so the observer would 
not be able to find out the session key to decrypt the message. 

(2) you are booting off USB and you assume the other teams temporarily had 
physical control of the USB
If the other team had physical control of the beaglebone, I don't think the 
network will still be secure. They could use the board to log in as a root 
user and get access to the remote host server without entering the password 
since we disabled the password authentication. 

2. Explain why the gpg --verify command in the following instructions doesn't 
really verify that you personally created the tar file in question. How would 
you go about fixing this problem?
$ gpg --gen-key (choose default)
Real Name: Hermmy Wang
Email Address: hermmyw@hotmail.com
Passphrase: 12345678
$ cd /sys/bus/i2c/devices/0-0050
$ gpg --armor --output ~/eeprom.sig --detach-sign eeprom

gpg --verify cannot verify I personally created the tar file because 
detach-sign creates a file with just the signature. We cannot be sure that 
the digital signature was sent by the sender and not by a malicious user. If 
the tar is created by a malicious user, and the malicious user also generates 
hw.tar.gz.sig, the command would think the malicious user is the sender.
