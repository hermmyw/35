hw9.txt
1. Check out version 3.0 of Diffutils from your repository, into a new branch named “quote”.
$ git clone ~eggert/src/gnu/diffutils diffutilshw
$ cd diffutilshw
$ git checkout v3.0 -b 'quote'
Switched to a new branch 'quote'

2. Install your change into this new branch, by running the patch command with your patch quote-3.0-patch.txt as input.
$ patch -p1 <~/diffutils/quote-3.0-patch.txt
patching file src/cmp.c
patching file src/diff.c
patching file src/diff3.c
patching file src/dir.c
patching file src/sdiff.c
patching file src/util.c

3. Learn how to use the Emacs function add-change-log-entry-other-window (C-x 4 a).
Use this Emacs function to compose an appropriate ChangeLog entry for your patch, by adapting the change log from the original patch.
I open the six files and write the change log for each one using (C-x 4 a), and move ChangeLog from diffutils/src to diffutils
4. Commit your changes to the new branch, using the ChangeLog entry as the commit message.
$ git add .
$ git commit -F ChangeLog
[quote e2eef5c] 2018-06-06  Huimin Wang  <huimin@lnxsrv01.seas.ucla.edu>
 Committer: Huimin Wang <huimin@lnxsrv01.seas.ucla.edu>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:

    git config --global user.name "Your Name"
    git config --global user.email you@example.com

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 6 files changed, 43 insertions(+), 43 deletions(-)

5. Use the command “git format-patch” to generate a file formatted-patch.txt. This patch should work without having to fix things by hand afterwards.
$ git format-patch -1 --stdout > formatted-patch.txt

6. Your teaching assistant will assign you a partner, who will also generate a patch. Verify that your partner's patch works, by checking out version 3.0 again into a new temporary branch partner, applying the patch with the command “git am”, and building the resulting system, checking that it works with “make check”.
$ git checkout v3.0 -b 'partner'
$ git am < ~/partner-patch.txt
$ git log
	My partner's log entry shows up in the log.
$ ./bootstrap
$ ./configure
$ make
$ make check
$ src/diff - .
src/diff: cannot compare '-' to a directory

7. Verify that your ChangeLog entry works, by running the command “make distdir” and inspecting the resulting diffutils*/ChangeLog file.
$ make distdir
$ emacs diffutils*/ChangeLog
	My partner's log entry shows up in the log.

8. There is a copy of the GNU Emacs git repository's master branch on SEASnet in the directory ~eggert/src/gnu/emacs. Run the command gitk on it, and find the newest merge that is not newer than 2015-01-25. Take a screenshot gitk-screenshot.png of your view of the mergepoint, and in an ASCII text file gitk-description.txt briefly describe the roles of subwindows that you see in the screenshot.
Log out
Log in with ssh -X
$ cd ~eggert/src/gnu/emacs
$ gitk








