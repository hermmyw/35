lab4.txt
===============================================================================
1. Build this old version of coreutils as-is, and then again with this renaming
patch. What problems did you have when building it as-is, and why did the 
renaming patch fix them?
$ wget https://web.cs.ucla.edu/classes/spring18/cs35L/assign/
coreutils-with-bug.tar.gz
$ tar xvf coreutils-with-bug.tar.gz
	Fetch the old version of coreutils.

Install the old version of coreutils:
$ cd
$ mkdir lab4
$ realpath lab4
/w/home.20/cs/ugrad/huimin/lab4
	Create a directory to install coreutils.

$ cd ~/coreutils-with-bug
$ ./configure --prefix=/w/home.20/cs/ugrad/huimin/lab4
$ make
In file included from utimecmp.c:41:0:
utimens.h:2:5: error: conflicting types for 'futimens'
 int futimens (int, char const *, struct timespec const [2]);
     ^~~~~~~~
In file included from utimecmp.h:25:0,
                 from utimecmp.c:25:
/usr/include/sys/stat.h:373:12: note: previous declaration of 'futimens' was 
here
 extern int futimens (int __fd, const struct timespec __times[2]) __THROW;
            ^~~~~~~~
make[3]: *** [Makefile:659: utimecmp.o] Error 1
make[3]: Leaving directory 
'/w/home.20/cs/ugrad/huimin/35LA4/coreutils-with-bug/lib'
make[2]: *** [Makefile:414: all] Error 2
make[2]: Leaving directory 
'/w/home.20/cs/ugrad/huimin/35LA4/coreutils-with-bug/lib'
make[1]: *** [Makefile:419: all-recursive] Error 1
make[1]: Leaving directory 
'/w/home.20/cs/ugrad/huimin/35LA4/coreutils-with-bug'
make: *** [Makefile:357: all] Error 2
	Encounter an error in utimens.h and stat.h.

$ make clean

Apply the patch:
$ wget https://web.cs.ucla.edu/classes/spring18/cs35L/assign/coreutils.diff
$ patch -p0 < coreutils.diff
patching file lib/utimens.c
patching file lib/utimens.h
patching file src/copy.c
patching file src/tee.c
patching file src/touch.c
$ ./configure --prefix=/w/home.20/cs/ugrad/huimin/lab4
$ make
$ make install
$ ls ~/lab4
bin  share

I could not build the old version of coreutils as-is, as I encountered the 
error which states that the previous declaration in stat.h for the function 
'futimens' has a conflict with the function 'futimens' in utimens.h. The old 
version of coreutils is outdated (version 5.93), so it might contain functions 
that conflict with the updated C standards. Therefore, the patch renames 
'futimens' and some other functions by adding prefix 'coreutils_' and corrects 
the places where these functions are called, such as in touch.c, copy.c, and 
main. 


===============================================================================
2. Reproduce the problem. Use a debugger to figure out what went wrong and to 
fix the corresponding source file.
$ cd ~/lab4/bin
$ tmp=$(mktemp -d)
$ cd $tmp
$ touch -d '1918-11-11 11:00 GMT' wwi-armistice
$ touch now
$ sleep 1
$ touch now1
$ TZ=UTC0 ~/lab4/bin/ls -lt --full-time wwi-armistice now now1
-rw-r--r-- 1 huimin csugrad 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice
-rw-r--r-- 1 huimin csugrad 0 2018-05-02 23:53:38.750511073 +0000 now1
-rw-r--r-- 1 huimin csugrad 0 2018-05-02 23:53:33.233417906 +0000 now

I also tried to use the installed version of coreutils:
$ TZ=UTC0 ls -lt --full-time wwi-armistice now now1
-rw-r--r-- 1 huimin csugrad 0 2018-05-02 23:53:38.750511073 +0000 now1
-rw-r--r-- 1 huimin csugrad 0 2018-05-02 23:53:33.233417906 +0000 now
-rw-r--r-- 1 huimin csugrad 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice
It works correctly without the bug.


Inside $tmp, I use a debugger to figure out the buggy source file:
$ gdb ~/lab4/bin/ls
(gdb) run -lt --full-time wwi-armistice now
	Running ls with wwi-artimistice with one other file
(gdb) break sort_files
Breakpoint 1 at 0x4042f0: file ls.c, line 2954.
(gdb) run -lt --full-time wwi-armistice now
Starting program: /w/home.20/cs/ugrad/huimin/lab4/bin/ls -lt --full-time wwi-armistice now

Breakpoint 1, sort_files () at ls.c:2954
2954	{
(gdb) step
2962	  if (! setjmp (failed_strcoll))
(gdb) step
2964	      switch (sort_type)
(gdb) step
2969		  switch (time_type)
(gdb) step
2975		      func = sort_reverse ? rev_cmp_mtime : compare_mtime;
(gdb) break compare_mtime
Breakpoint 2 at 0x4067c0: file ../lib/timespec.h, line 48.
(gdb) disable 1
(gdb) run -lt --full-time wwi-armistice now
Starting program: /w/home.20/cs/ugrad/huimin/lab4/bin/ls -lt --full-time wwi-armistice now

Breakpoint 2, compare_mtime (a=0x6170d0, b=0x617180) at ls.c:2884
2884	static int compare_mtime (V a, V b) { return cmp_mtime (a, b, xstrcoll); }
(gdb) step
cmp_mtime (cmp=0x4045f0 <xstrcoll>, b=0x617180, a=0x6170d0) at ls.c:2884
2884	static int compare_mtime (V a, V b) { return cmp_mtime (a, b, xstrcoll); }
(gdb) step
timespec_cmp (b=..., a=...) at ../lib/timespec.h:48
48	  int diff = a.tv_sec - b.tv_sec;
(gdb) print diff
$1 = -1155827283
(gdb) list compare_time
43	/* Return negative, zero, positive if A < B, A == B, A > B, respectively.
44	   Assume the nanosecond components are in range, or close to it.  */
45	static inline int
46	timespec_cmp (struct timespec a, struct timespec b)
47	{
48	  int diff = a.tv_sec - b.tv_sec;
49	  return diff ? diff : a.tv_nsec - b.tv_nsec;
50	}
51	
52	# if ! HAVE_DECL_NANOSLEEP
(gdb)
(gdb) quit
A debugging session is active.

	Inferior 1 [process 13300] will be killed.

Quit anyway? (y or n) y


I used gdb to find out that there might be a problem with 'diff' calculated in 
timespec_cmp function, which appears to be in the lib/timespec.h:48. The number
is very large to the negative side, so it might cause a problem of overflowing,
or not being recognized by later functions. 


===============================================================================
3. Construct a new patch file lab4.diff containing your coreutils fixes, in the 
form of a ChangeLog entry followed by a diff -u patch.

$ cd ~/coreutils-with-bug/lib
$ find times*
timespec.h
$ cp timespec.h timespec2.h
	Make a copy of the older version in order to make the patch.
$ mv timespec2.h ~
$ emacs timespec.h
	Change the timespec_cmp function in timespec.h.
$ cd
$ diff -u timespec2.h ~/coreutils-with-bug/lib/timespec.h > lab4.diff


===============================================================================
4.Also, try to reproduce the problem in your home directory on the SEASnet Linux
servers, instead of using the $tmp directory. When running the above test case,
use the already-installed touch and ls utilities instead of the old version of 
coreutils. How well does SEASnet do?
$ cd
$ touch -d '1918-11-11 11:00 GMT' wwi-armistice
$ touch now
$ sleep 1
$ touch now1
$ TZ=UTC0 ls -lt --full-time wwi-armistice now now1
-rw-r--r-- 1 huimin csugrad 0 2054-12-17 17:28:16.000000000 +0000 wwi-armistice
-rw-r--r-- 1 huimin csugrad 0 2018-05-03 04:31:56.081174000 +0000 now1
-rw-r--r-- 1 huimin csugrad 0 2018-05-03 04:31:48.210436000 +0000 now

Instead of creating a file in 1918-11-11, the touch -d command creates a file 
in 2054-12-17. Unix Epoch defines a point in time as the number of seconds 
elapsed since 1970-1-1 00:00. SEASnet NFS filesystem uses unsigned time stamps, 
whereas local file system on Linux server uses signed time stamps. Therefore, 
the time before 1970-1-1 00:00 will round to the future like an overflow 
behavior in SEASnet NFS filesystem. 











